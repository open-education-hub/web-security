"use strict";(self.webpackChunkweb_security=self.webpackChunkweb_security||[]).push([[183],{49:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/nmap_output-ed3ab5d55108d09ba36912201ce3cb10.png"},337:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/send_to_intruder-13e5ee7bb6898a6bc7e3e1b4447e2913.png"},577:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/pentest_phases-89ddb91850f9cfe5038de9af06201454.png"},615:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(8168),o=(a(6540),a(5680));const i={},r="Recon & Enumeration & Recap",s={unversionedId:"Network and communication security/Enumeration and Recon/Reading/README",id:"Network and communication security/Enumeration and Recon/Reading/README",title:"Recon & Enumeration & Recap",description:"When it comes to hacking, knowledge is power.",source:"@site/docs/Network and communication security/Enumeration and Recon/Reading/README.md",sourceDirName:"Network and communication security/Enumeration and Recon/Reading",slug:"/Network and communication security/Enumeration and Recon/Reading/",permalink:"/web-security/Network and communication security/Enumeration and Recon/Reading/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Reading",permalink:"/web-security/Network and communication security/Enumeration and Recon/Reading/"},next:{title:"enumeration-and-recon",permalink:"/web-security/Network and communication security/Enumeration and Recon/enumeration-and-recon"}},l={},p=[{value:"Phases of Penetration Testing",id:"phases-of-penetration-testing",level:2},{value:"Nmap",id:"nmap",level:2},{value:"Shodan",id:"shodan",level:2},{value:"OWASP Zap",id:"owasp-zap",level:2},{value:"Extracting common passwords - Burp Intruder",id:"extracting-common-passwords---burp-intruder",level:2},{value:"Testing for default credentials",id:"testing-for-default-credentials",level:2},{value:"Types of brute force attacks",id:"types-of-brute-force-attacks",level:2},{value:"Dictionary attack",id:"dictionary-attack",level:3},{value:"Password-spray attack",id:"password-spray-attack",level:3},{value:"Credential Stuffing attack",id:"credential-stuffing-attack",level:3},{value:"Web Content Discovery",id:"web-content-discovery",level:2},{value:"DIRB",id:"dirb",level:3},{value:"Similar tools",id:"similar-tools",level:3},{value:"Web Content Discovery vs Web Fuzzing",id:"web-content-discovery-vs-web-fuzzing",level:2},{value:"Web Content Enumeration / Web Content Discovery / Web Content Scanning / Dirbusting / Directory brute forcing",id:"web-content-enumeration--web-content-discovery--web-content-scanning--dirbusting--directory-brute-forcing",level:3},{value:"Web Fuzzing (Dirbusting++)",id:"web-fuzzing-dirbusting",level:3},{value:"Hard 404 vs Soft 404",id:"hard-404-vs-soft-404",level:2},{value:"Hard 404",id:"hard-404",level:3},{value:"Soft 404",id:"soft-404",level:3},{value:"Recap with DVWA",id:"recap-with-dvwa",level:2},{value:"Setup instructions",id:"setup-instructions",level:3},{value:"Solutions",id:"solutions",level:3},{value:"Wordlists",id:"wordlists",level:3},{value:"Bug Bounty Program Lists",id:"bug-bounty-program-lists",level:3}],u={toc:p},c="wrapper";function d({components:e,...t}){return(0,o.yg)(c,(0,n.A)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"recon--enumeration--recap"},"Recon & Enumeration & Recap"),(0,o.yg)("p",null,"When it comes to hacking, knowledge is power.\nThe more knowledge you have about a target system or network, the more options you have available.\nThis session will put together all you have learned so far to give you an overview of how to approach a given target you want to exploit.\nYou will also find out about some more security tools that can help you automate the process."),(0,o.yg)("h2",{id:"phases-of-penetration-testing"},"Phases of Penetration Testing"),(0,o.yg)("p",null,"Penetration testing is an authorized simulated cyber attack on a computer system, performed to evaluate its security."),(0,o.yg)("p",null,"A standard penetration testing flow implies 5 stages:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"reconnaissance")," - gathering information about the target system: website technologies, subdomains, open ports, Google hacking"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"scanning")," - manually or automatically (using tools) discovering vulnerabilities in the system, like SQL injection, XSS etc."),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"gaining access")," using enumeration - exploiting the vulnerabilities found before to collect sensitive information: usernames, machine names, network information, service settings"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"maintaining access")," - planting hidden programs (like Trojan horses) that make a future attack easier"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("strong",{parentName:"li"},"covering tracks")," - cleaning up all the signs that may lead to thinking that an attack happened")),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Penetration testing phases",src:a(577).A,width:"1272",height:"498"})),(0,o.yg)("p",null,"Next, we introduce some popular tools that may help in the first three phases, to gather information about a target.\nExploiting Tools/ Security Testing Tools/ Penetration Testing Tools are used for the discovery of vulnerabilities without attempting to actually exploit them."),(0,o.yg)("h1",{id:"1-reconnaissance"},"1. Reconnaissance"),(0,o.yg)("p",null,"Reconnaissance is an important first stage in any ethical hacking attempt.\nBefore it is possible to exploit a vulnerability in the target system, it is necessary to find it.\nBy performing reconnaissance on the target, an ethical hacker can learn about the details of the target network and identify potential attack vectors."),(0,o.yg)("h2",{id:"nmap"},"Nmap"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://insecure.org/"},"Nmap")," is probably the most well-known tool for active ",(0,o.yg)("strong",{parentName:"p"},"network")," reconnaissance.\nIt is a network scanner designed to determine details about a system and the programs running on it."),(0,o.yg)("p",null,"Every computer has a total of 65535 available ports; however, many of these are registered as standard ports.\nFor example, a HTTP web service can nearly always be found on port 80 of the server.\nA HTTPS web service can be found on port 443.\nIf we do not know which of these ports a server has open, then we do not have a hope of successfully attacking the target; thus, it is crucial that we begin any attack with a port scan.\nNmap can be used to perform many different kinds of port scan; the basic theory is this: it will connect to each port of the target in turn.\nDepending on how the port responds, it can be determined as being ",(0,o.yg)("em",{parentName:"p"},"open"),", ",(0,o.yg)("em",{parentName:"p"},"closed"),", or ",(0,o.yg)("em",{parentName:"p"},"filtered")," (usually by a firewall).\nOnce we know which ports are open, we can then look at ",(0,o.yg)("em",{parentName:"p"},"enumerating")," which services are running on each port \u2013 either manually, or more commonly using nmap."),(0,o.yg)("p",null,"Typing the simple command ",(0,o.yg)("inlineCode",{parentName:"p"},"nmap")," will display all of its options for scanning, while ",(0,o.yg)("inlineCode",{parentName:"p"},"nmap <target>")," will convert the hostname to an IP address and scan the top 1000 TCP ports, displaying their state and the service running on it:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Nmap output",src:a(49).A,width:"434",height:"210"})),(0,o.yg)("p",null,"You can see the full example ",(0,o.yg)("a",{parentName:"p",href:"https://nmap.org/book/port-scanning-tutorial.html"},"here")," and practice more Nmap options ",(0,o.yg)("a",{parentName:"p",href:"https://tryhackme.com/room/rpnmap"},"here"),"."),(0,o.yg)("h2",{id:"shodan"},"Shodan"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://www.shodan.io/"},"Shodan")," is a search engine similar to Google.\nBut while Google searches for websites, Shodan searches for devices that are connected to the internet - from routers and servers, to Internet of Things (IoT) devices, such as thermostats and baby monitors, to complex systems that govern a wide range of industries, including energy, power, and transportation.\nYou can use a variety of search filters: port, IP address, city etc.\nIf your internet-facing devices aren\u2019t protected, Shodan can tell hackers everything they need to know to break into your network."),(0,o.yg)("h1",{id:"2-scanning"},"2. Scanning"),(0,o.yg)("h2",{id:"owasp-zap"},"OWASP Zap"),(0,o.yg)("p",null,"The ",(0,o.yg)("a",{parentName:"p",href:"https://owasp.org/"},"Open Web Application Security Project")," (OWASP) is a nonprofit foundation that works to improve the security of software.\nThe ",(0,o.yg)("a",{parentName:"p",href:"https://owasp.org/www-project-top-ten/"},"OWASP Top 10")," is a standard awareness document for developers and web application security.\nIt represents a broad consensus about the most critical security risks to web applications and is updated every 3 years."),(0,o.yg)("p",null,"Developed by OWASP, ",(0,o.yg)("a",{parentName:"p",href:"https://www.zaproxy.org/"},"ZAP")," or Zed Attack Proxy is a multi-platform, open source web application security testing tool. ZAP is used for finding a number of security vulnerabilities in a web app during the development as well as testing phase.\nOther than its use as a scanner, ZAP can also be used to intercept a proxy for manually testing a web page.\nZAP can identify:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Application error disclosure"),(0,o.yg)("li",{parentName:"ul"},"Cookie not marked with the HttpOnly flag"),(0,o.yg)("li",{parentName:"ul"},"Missing anti-CSRF tokens and security headers"),(0,o.yg)("li",{parentName:"ul"},"Private IP disclosure"),(0,o.yg)("li",{parentName:"ul"},"Session ID in URL rewrite"),(0,o.yg)("li",{parentName:"ul"},"SQL injection"),(0,o.yg)("li",{parentName:"ul"},"XSS injection")),(0,o.yg)("p",null,"You can read about other active recon tools ",(0,o.yg)("a",{parentName:"p",href:"https://resources.infosecinstitute.com/topic/top-10-network-recon-tools/#gref"},"here"),": Nessus, OpenVAS, Nikto, Metasploit, ",(0,o.yg)("a",{parentName:"p",href:"https://pentest-tools.com/website-vulnerability-scanning/website-scanner"},"Pentest-Tools Website Scanner"),"."),(0,o.yg)("h1",{id:"3-enumeration"},"3. Enumeration"),(0,o.yg)("h2",{id:"extracting-common-passwords---burp-intruder"},"Extracting common passwords - Burp Intruder"),(0,o.yg)("p",null,"You were introduced to Burp Proxy in an earlier session.\nNow we'll see an example of how to use Intruder in order to enumerate passwords.\nWith Burp Intruder, customized attacks can be automated against web applications.\nCustomizing attacks requires that we specify one or more payloads and the position where the payloads will be placed in the website."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"I opened Burp and the built-in Chromium browser (or your browser of choice, but pay attention to setting up the proxy), having the intercept ",(0,o.yg)("strong",{parentName:"li"},"off"),"."),(0,o.yg)("li",{parentName:"ul"},"I navigated to ",(0,o.yg)("a",{parentName:"li",href:"https://sss-ctf.security.cs.pub.ro/home"},"https://sss-ctf.security.cs.pub.ro/home")," and tried to log in using the email ",(0,o.yg)("strong",{parentName:"li"},(0,o.yg)("a",{parentName:"strong",href:"mailto:a@a.com"},"a@a.com"))," and the password ",(0,o.yg)("strong",{parentName:"li"},"abc123"),"."),(0,o.yg)("li",{parentName:"ul"},"The POST request can be found in HTTP history. Right click on it to send it to Intruder.")),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Send request to Burp Intruder",src:a(337).A,width:"1531",height:"376"})),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Let's say we want to try all the passwords from ",(0,o.yg)("strong",{parentName:"li"},"abc1"),", ",(0,o.yg)("strong",{parentName:"li"},"abc3"),", ",(0,o.yg)("strong",{parentName:"li"},"abc5"),"... to ",(0,o.yg)("strong",{parentName:"li"},"abc100"),". Navigate to the ",(0,o.yg)("strong",{parentName:"li"},"Positions")," tab - the payload position is specified with a pair of these characters: ",(0,o.yg)("strong",{parentName:"li"},"\xa7")," called ",(0,o.yg)("strong",{parentName:"li"},"payload markers"),".")),(0,o.yg)("p",null,(0,o.yg)("strong",{parentName:"p"},"Note!")," By default, Burp surrounds by default some parameter values which might be candidates for enumeration, such as cookie values, or POST data values.\nRemove the extra ",(0,o.yg)("strong",{parentName:"p"},"\xa7")," characters, leaving it like in the picture below."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Set payload position",src:a(5846).A,width:"1281",height:"621"})),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Our payload type (wordlist) is a sequence of numbers which can be automatically generated in Burp. Go to the ",(0,o.yg)("strong",{parentName:"li"},"Payloads")," tab and select ",(0,o.yg)("strong",{parentName:"li"},"Numbers")," as the ",(0,o.yg)("strong",{parentName:"li"},"Payload type"),"."),(0,o.yg)("li",{parentName:"ol"},"Fill in the Payload options to generate all the numbers from 1 to 100, with step 2 (1, 3, 5...)."),(0,o.yg)("li",{parentName:"ol"},"Finally, launch the attack.")),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Set payload type",src:a(7264).A,width:"1851",height:"506"})),(0,o.yg)("p",null,"A new window opens and you can see all the requests Burp is making, with the payloads you specified.\nFor example, you can check the request corresponding to the payload 7, with the resulting password being ",(0,o.yg)("strong",{parentName:"p"},"abc7"),", and you can observe the response, its status code, or even open it in the browser."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"Attack example",src:a(5118).A,width:"840",height:"663"})),(0,o.yg)("p",null,"There are many ways in which you can customize this process according to your needs.\nYou can have multiple payload positions and select from four attack types, specifying how to insert the payloads (one different wordlist for each position, or combinations of them).\nFind more details ",(0,o.yg)("a",{parentName:"p",href:"https://portswigger.net/burp/documentation/desktop/tools/intruder/positions"},"here"),"."),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Sniper")," - This uses a single set of payloads.\nIt targets each payload position in turn, and places each payload into that position in turn.\nPositions that are not targeted for a given request are not affected - the position markers are removed and any enclosed text that appears between them in the template remains unchanged.\nThis attack type is useful for fuzzing a number of request parameters individually for common vulnerabilities.\nThe total number of requests generated in the attack is the product of the number of positions and the number of payloads in the payload set."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Battering ram")," - This uses a single set of payloads.\nIt iterates through the payloads, and places the same payload into all of the defined payload positions at once.\nThis attack type is useful where an attack requires the same input to be inserted in multiple places within the request (e.g. a username within a Cookie and a body parameter).\nThe total number of requests generated in the attack is the number of payloads in the payload set."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Pitchfork")," - This uses multiple payload sets.\nThere is a different payload set for each defined position (up to a maximum of 20).\nThe attack iterates through all payload sets simultaneously, and places one payload into each defined position.\nIn other words, the first request will place the first payload from payload set 1 into position 1 and the first payload from payload set 2 into position 2; the second request will place the second payload from payload set 1 into position 1 and the second payload from payload set 2 into position 2, etc.\nThis attack type is useful where an attack requires different but related input to be inserted in multiple places within the request (e.g. a username in one parameter, and a known ID number corresponding to that username in another parameter).\nThe total number of requests generated in the attack is the number of payloads in the smallest payload set."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("strong",{parentName:"li"},"Cluster bomb")," - This uses multiple payload sets.\nThere is a different payload set for each defined position (up to a maximum of 20).\nThe attack iterates through each payload set in turn, so that all permutations of payload combinations are tested. I.e., if there are two payload positions, the attack will place the first payload from payload set 2 into position 2, and iterate through all the payloads in payload set 1 in position 1; it will then place the second payload from payload set 2 into position 2, and iterate through all the payloads in payload set 1 in position 1.\nThis attack type is useful where an attack requires different and unrelated or unknown input to be inserted in multiple places within the request (e.g. when guessing credentials, a username in one parameter, and a password in another parameter).\nThe total number of requests generated in the attack is the product of the number of payloads in all defined payload sets - this may be extremely large.")),(0,o.yg)("p",null,"There are also many different types of payloads you can use (",(0,o.yg)("a",{parentName:"p",href:"https://portswigger.net/burp/documentation/desktop/tools/intruder/payloads/types"},"here")," is the entire list), from specifying your own list of words to generating random bytes.\nYou can find lists of popular credentials online, for instance, ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/danielmiessler/SecLists/tree/master/Passwords"},"here")," is a repo with lists of most used passwords."),(0,o.yg)("h2",{id:"testing-for-default-credentials"},"Testing for default credentials"),(0,o.yg)("p",null,"Using the system's default credentials is a relatively easy and popular technique to gain first access.\nThe default non-random passwords that come with many devices (especially those in the Internet of Things) are frequently left untouched."),(0,o.yg)("p",null,"You can read more about this ",(0,o.yg)("a",{parentName:"p",href:"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/04-Authentication_Testing/02-Testing_for_Default_Credentials"},"here"),".\nYou can also find wordlists that have all the default credentials for most known vendors in one place, such as ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/ihebski/DefaultCreds-cheat-sheet"},"this one"),"."),(0,o.yg)("h2",{id:"types-of-brute-force-attacks"},"Types of brute force attacks"),(0,o.yg)("p",null,"There are many different types of performing a brute force attack, but we will mention just three."),(0,o.yg)("h3",{id:"dictionary-attack"},"Dictionary attack"),(0,o.yg)("p",null,"This is a straighforward technique and maybe the default one that comes to mind when trying to discover a set of (username, password) credentials.\nGiven a wordlist of usernames and a wordlist of passwords, for all the usernames, all the passwords are tried."),(0,o.yg)("p",null,"Example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"usernames = [user1, user2]\npasswords = [pass1, pass2]\nWe try, in this order: (user1, pass1), (user1, pass2), (user2, pass1), (user2, pass2)\n")),(0,o.yg)("h3",{id:"password-spray-attack"},"Password-spray attack"),(0,o.yg)("p",null,"This technique is a bit more complicated, but it is suitable for situations where we want to avoid username lockout.\nThat is, when the target blocks us after a number of wrong attempts for a username and, for a certain period of time, we can't make any more attempts."),(0,o.yg)("p",null,"Taking this into account, the process is as follows:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"We take one password at a time and try all usernames for it (instead of taking a username and trying all passwords, like for Dictionary attack)."),(0,o.yg)("li",{parentName:"ul"},"At the beginning we define a constant representing the ",(0,o.yg)("em",{parentName:"li"},"maximum number of attempts to try the same username")," in a period."),(0,o.yg)("li",{parentName:"ul"},"After this limit is reached, we introduce a ",(0,o.yg)("em",{parentName:"li"},"delay"),' (which can be viewed as the lockout period) and perform a "sleep".'),(0,o.yg)("li",{parentName:"ul"},"After this, we resume the attack.")),(0,o.yg)("p",null,"Example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"usernames = [user1, user2]\npasswords = [pass1, pass2]\nusername_attempts_per_period = 1\nlockout_period = 5\nWe try, in this order: (pass1, user1), (pass1, user2), sleep(5), (pass2, user1), (pass2, user2)\n")),(0,o.yg)("h3",{id:"credential-stuffing-attack"},"Credential Stuffing attack"),(0,o.yg)("p",null,"Given a wordlist of usernames and a wordlist of passwords, this technique involves trying them in pairs.\nFor each username, we try it with the password on the corresponding position.\nThis usually implies that the wordlists are of the same length.\nThe technique is suitable when using the default credentials wordlists, for example."),(0,o.yg)("p",null,"Example:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"usernames = [user1, user2]\npasswords = [pass1, pass2]\nWe try, in this order: (user1, pass1), (user2, pass2)\n")),(0,o.yg)("h2",{id:"web-content-discovery"},"Web Content Discovery"),(0,o.yg)("p",null,"Let's say we have the target server ",(0,o.yg)("strong",{parentName:"p"},(0,o.yg)("a",{parentName:"strong",href:"https://security.cs.pub.ro/"},"https://security.cs.pub.ro/"))," and we want to discover hidden files, directories or other resources there.\nManually, we would make multiple requests like ",(0,o.yg)("em",{parentName:"p"},(0,o.yg)("a",{parentName:"em",href:"https://security.cs.pub.ro/docs"},"https://security.cs.pub.ro/docs")),", ",(0,o.yg)("em",{parentName:"p"},(0,o.yg)("a",{parentName:"em",href:"https://security.cs.pub.ro/config.php"},"https://security.cs.pub.ro/config.php"))," etc. or whatever we imagine might find and see if we get a 404 Not Found response or not.\nLuckily, there are command line tools and predefined wordlists in Kali (",(0,o.yg)("strong",{parentName:"p"},"/usr/share/wordlists/"),") doing exactly this for us."),(0,o.yg)("h3",{id:"dirb"},"DIRB"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"https://tools.kali.org/web-applications/dirb"},"DIRB")," is a Web Content Scanner, a Kali built in tool.\nIt looks for existing (and/or hidden) Web Objects.\nIt basically works by launching a dictionary based attack against a web server and analyzing the response.\nDIRB comes with a set of preconfigured attack wordlists for easy usage but you can use your custom wordlists.\nFor each filename, it checks the existence on the web server and returns the results which do not give a 404 Not Found response."),(0,o.yg)("p",null,"Usage example: ",(0,o.yg)("inlineCode",{parentName:"p"},"./dirb <url_base> [<wordlist_file(s)>] [options]")),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"DIRB example",src:a(5275).A,width:"627",height:"416"})),(0,o.yg)("p",null,"The output lines with the results found (not 404) start with a ",(0,o.yg)("inlineCode",{parentName:"p"},"+")," and give details about status code and page size."),(0,o.yg)("p",null,"You can read the documentation if you want to specify custom options, like custom file extensions to look for."),(0,o.yg)("h3",{id:"similar-tools"},"Similar tools"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://tools.kali.org/web-applications/dirbuster"},"DirBuster")," - not maintained anymore, Kali built in, written in Java.\nThe only one with a GUI and not a CLI."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.kali.org/tools/dirsearch/"},"DirSearch")," - Kali built in & on ",(0,o.yg)("a",{parentName:"li",href:"(https://github.com/maurosoria/dirsearch)"},"GitHub"),", written in Python."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://tools.kali.org/web-applications/gobuster"},"GoBuster")," - Kali built in & on ",(0,o.yg)("a",{parentName:"li",href:"https://github.com/OJ/gobuster"},"GitHub"),", written in Go.\nCan do DNS and VHost busting, S3 buckets enumeration."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/xmendez/wfuzz"},"wfuzz")," - on GitHub, written in Python, can be easily installed with pip."),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/ffuf/ffuf"},"ffuf")," - on GitHub, written in Go, has the option to mutate the files found.\nCan do VHost discovery."),(0,o.yg)("li",{parentName:"ul"},"Burp Intruder - also on the Commercial side.")),(0,o.yg)("p",null,"You can find a detailed comparison ",(0,o.yg)("a",{parentName:"p",href:"https://blog.sec-it.fr/en/2021/02/16/fuzz-dir-tools/"},"here"),".\nWe don't recommend DirBuster and DirSearch since the others are newer, improved and better-maintained tools.\nDIRB is also not maintained anymore, but can come in handy if you want to do a quick content discovery, with not many options to configure."),(0,o.yg)("h2",{id:"web-content-discovery-vs-web-fuzzing"},"Web Content Discovery vs Web Fuzzing"),(0,o.yg)("p",null,"While these terms are interchangeable because the techniques and the goals are similar, let's also break them down and establish some particularities."),(0,o.yg)("h3",{id:"web-content-enumeration--web-content-discovery--web-content-scanning--dirbusting--directory-brute-forcing"},"Web Content Enumeration / Web Content Discovery / Web Content Scanning / Dirbusting / Directory brute forcing"),(0,o.yg)("p",null,"All these synonyms indicate a clear purpose: discovering (hidden/juicy) files on a web server.\nThey usually involve sending GET requests (or even HEAD, since it is faster and we are mainly interested in the returned status code).\nAn input wordlist might usually sound like ",(0,o.yg)("em",{parentName:"p"},"Common config filenames"),".\nAlso, watch out for common filename extensions, such as ",(0,o.yg)("strong",{parentName:"p"},".log")," for log files, ",(0,o.yg)("strong",{parentName:"p"},".bak")," for backup files."),(0,o.yg)("h3",{id:"web-fuzzing-dirbusting"},"Web Fuzzing (Dirbusting++)"),(0,o.yg)("p",null,"As a general term, ",(0,o.yg)("em",{parentName:"p"},"fuzzing")," means sending random, unexpected payloads, to try to trigger unexpected behaviors, so we can add this to the attack goals.\nA web fuzzer tool generally allows for more customization:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"we can try any HTTP method"),(0,o.yg)("li",{parentName:"ul"},"we can insert the payload in more various location, even in the headers or POST body"),(0,o.yg)("li",{parentName:"ul"},"the wordlist may include weird characters (e.g. non UTF-8, foreign languages), very long words etc.")),(0,o.yg)("h2",{id:"hard-404-vs-soft-404"},"Hard 404 vs Soft 404"),(0,o.yg)("p",null,"You might be used to think that, when you make a request to a web server for a filename that doesn't exist, it should return 404 Not Found.\nIn reality, it is not always the case.\nLet's see some different behaviors of websites when we try to make such a request.\nFor starters: how do we know how to make a request with a filename that doesn't exist?\nWell, this one is easy: we could just make a request with a very random filename, such as: ",(0,o.yg)("inlineCode",{parentName:"p"},"http://example.com/jf31yrf7ugfr"),"."),(0,o.yg)("h3",{id:"hard-404"},"Hard 404"),(0,o.yg)("p",null,"We call a ",(0,o.yg)("strong",{parentName:"p"},"hard 404")," a non-existent page that returns the 404 Not Found HTTP code ",(0,o.yg)("strong",{parentName:"p"},"OR")," ",(0,o.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/410"},"410 Gone")," - this is also included, because it denotes a resource that is no longer available."),(0,o.yg)("h3",{id:"soft-404"},"Soft 404"),(0,o.yg)("p",null,"A ",(0,o.yg)("strong",{parentName:"p"},"soft 404")," is a non-existent page that, when requested, returns... basically anything else besides 404 or 410.\nSome examples of what can be returned:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"200 OK and a custom 404 page"),(0,o.yg)("li",{parentName:"ul"},"3xx redirect to a login page / home page / other 200 OK page"),(0,o.yg)("li",{parentName:"ul"},"5xx server error"),(0,o.yg)("li",{parentName:"ul"},"a WAF response may be triggered (e.g. by requesting some specific config files, such as ",(0,o.yg)("strong",{parentName:"li"},".htaccess"),")")),(0,o.yg)("p",null,"But we should also distinguish the situations where the page exists, but it redirects to the login page because you just have to be logged in to see it.\nBut this usually happens for common pages, such as ",(0,o.yg)("strong",{parentName:"p"},"my-account"),", while the real website behavior can be determined by requesting a random filename, as mentioned earlier."),(0,o.yg)("p",null,"A takeaway from here is that real-world websites are very unpredictible and you can expect anything. :)"),(0,o.yg)("p",null,"Also note that an enumeration / brute force / fuzzing attack implies sending many requests to a server, usually in parallel (using threads), in a short period of time.\nThis stresses the server and it might become unresponsive, reply slower, trigger the WAF (sometimes in the middle of the attack) or even cause DoS."),(0,o.yg)("h2",{id:"recap-with-dvwa"},"Recap with DVWA"),(0,o.yg)("p",null,"DVWA (Damn Vulnerable Web Application) is a deliberately vulnerable application which you can use to test your skills and exploit some of the most common web vulnerabilities, like XSS, SQL, LFI, with various difficulty levels."),(0,o.yg)("h3",{id:"setup-instructions"},"Setup instructions"),(0,o.yg)("p",null,"An easy way to deploy DVWA is by using ",(0,o.yg)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker"),", which you need to have installed on your machine.\nThen, follow the instructions from ",(0,o.yg)("a",{parentName:"p",href:"https://hub.docker.com/r/vulnerables/web-dvwa/"},"here"),".\nAfter running it, you can simply access it in your browser at ",(0,o.yg)("a",{parentName:"p",href:"http://127.0.0.1:80"},"http://127.0.0.1:80")," (or a different port, if you wish), login and start hacking."),(0,o.yg)("h3",{id:"solutions"},"Solutions"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Brute force: ",(0,o.yg)("a",{parentName:"li",href:"https://medium.com/cyberdefendersprogram/burp-suite-webpage-enumeration-and-vulnerability-testing-cfd0b140570d"},"https://medium.com/cyberdefendersprogram/burp-suite-webpage-enumeration-and-vulnerability-testing-cfd0b140570d")),(0,o.yg)("li",{parentName:"ul"},"SQL Injection: ",(0,o.yg)("a",{parentName:"li",href:"https://medium.com/cyberdefendersprogram/burp-suite-webpage-enumeration-and-vulnerability-testing-cfd0b140570d"},"https://medium.com/cyberdefendersprogram/burp-suite-webpage-enumeration-and-vulnerability-testing-cfd0b140570d")),(0,o.yg)("li",{parentName:"ul"},"Blind Sql: ",(0,o.yg)("a",{parentName:"li",href:"https://medium.com/hacker-toolbelt/dvwa-1-9-viii-blind-sql-injection-with-sqlmap-ee8d59fbdea7"},"https://medium.com/hacker-toolbelt/dvwa-1-9-viii-blind-sql-injection-with-sqlmap-ee8d59fbdea7")),(0,o.yg)("li",{parentName:"ul"},"CSRF: ",(0,o.yg)("a",{parentName:"li",href:"https://medium.com/hacker-toolbelt/dvwa-1-9-iv-csrf-b9f2409fd628"},"https://medium.com/hacker-toolbelt/dvwa-1-9-iv-csrf-b9f2409fd628")),(0,o.yg)("li",{parentName:"ul"},"File Upload: ",(0,o.yg)("a",{parentName:"li",href:"https://medium.com/hacker-toolbelt/dvwa-1-9-vi-file-upload-ce77a73b0453"},"https://medium.com/hacker-toolbelt/dvwa-1-9-vi-file-upload-ce77a73b0453"))),(0,o.yg)("h1",{id:"further-reading"},"Further Reading"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.safetydetectives.com/blog/what-is-shodan-and-how-to-use-it-most-effectively/"},"https://www.safetydetectives.com/blog/what-is-shodan-and-how-to-use-it-most-effectively/")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://hackr.io/blog/top-10-open-source-security-testing-tools-for-web-applications"},"https://hackr.io/blog/top-10-open-source-security-testing-tools-for-web-applications")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.knowledgehut.com/blog/security/enumeration-in-ethical-hacking"},"https://www.knowledgehut.com/blog/security/enumeration-in-ethical-hacking")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.greycampus.com/opencampus/ethical-hacking/enumeration-and-its-types"},"https://www.greycampus.com/opencampus/ethical-hacking/enumeration-and-its-types")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.searchenginejournal.com/technical-seo/404-vs-soft-404-errors/#close"},"https://www.searchenginejournal.com/technical-seo/404-vs-soft-404-errors/#close")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://blog.sec-it.fr/en/2021/02/16/fuzz-dir-tools/"},"https://blog.sec-it.fr/en/2021/02/16/fuzz-dir-tools/"))),(0,o.yg)("h3",{id:"wordlists"},"Wordlists"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/Bo0oM/fuzz.txt"},"https://github.com/Bo0oM/fuzz.txt")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/aels/subdirectories-discover"},"https://github.com/aels/subdirectories-discover")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/danielmiessler/SecLists"},"https://github.com/danielmiessler/SecLists")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/ihebski/DefaultCreds-cheat-sheet"},"https://github.com/ihebski/DefaultCreds-cheat-sheet"))),(0,o.yg)("h3",{id:"bug-bounty-program-lists"},"Bug Bounty Program Lists"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://github.com/projectdiscovery/public-bugbounty-programs/blob/master/chaos-bugbounty-list.json"},"https://github.com/projectdiscovery/public-bugbounty-programs/blob/master/chaos-bugbounty-list.json")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://www.bugcrowd.com/bug-bounty-list/"},"https://www.bugcrowd.com/bug-bounty-list/")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("a",{parentName:"li",href:"https://hackerone.com/bug-bounty-programs"},"https://hackerone.com/bug-bounty-programs"))),(0,o.yg)("h1",{id:"activities"},"Activities"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"Not So Random"),(0,o.yg)("li",{parentName:"ol"},"Lamer Login"),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("a",{parentName:"li",href:"https://hub.docker.com/r/vulnerables/web-dvwa/"},"DVWA")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("a",{parentName:"li",href:"https://ginandjuice.shop/"},"Gin & Juice Shop"))))}d.isMDXComponent=!0},5118:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/attack_example-18b99099544e7ba3af9f0401101dcf20.png"},5275:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/dirb_example-9bbe9fa36aeb240fbd79fe517c83c022.png"},5680:(e,t,a)=>{a.d(t,{xA:()=>u,yg:()=>g});var n=a(6540);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach(function(t){o(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef(function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(a),h=o,g=c["".concat(l,".").concat(h)]||c[h]||d[h]||i;return a?n.createElement(g,r(r({ref:t},u),{},{components:a})):n.createElement(g,r({ref:t},u))});function g(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},5846:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/payload_position-c8981644f4e778b8f37bfb634e042d72.png"},7264:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/payload_type-16f0c37c5a28ffd916342fe513930880.png"}}]);